<div id="aiCreatorApp" class="ai-creator-app">
  <!-- Step 1: Welcome & Explanation -->
  <div class="ai-step" id="step-welcome" style="display: block;">
    <div class="ai-container">
      <div class="ai-hero">
        <h1 class="ai-title">🐕 All Dogs Rock Shop</h1>
        <h2 class="ai-subtitle">Put Your Pet in Iconic Poses! ✨</h2>
        <div class="ai-explanation">
          <div class="ai-step-preview">
            <div class="step-card">
              <span class="step-icon">📸</span>
              <h3>1. Upload Your Pet's Photo</h3>
              <p>Choose your favorite picture of your dog or cat</p>
            </div>
            <div class="step-card">
              <span class="step-icon">🎭</span>
              <h3>2. Choose Iconic Pose</h3>
              <p>Basketball dunk, astronaut, superhero & more!</p>
            </div>
            <div class="step-card">
              <span class="step-icon">🎨</span>
              <h3>3. AI Face Swap Magic</h3>
              <p>Your pet's face in legendary poses!</p>
            </div>
            <div class="step-card">
              <span class="step-icon">🛍️</span>
              <h3>4. Choose Your Products</h3>
              <p>See it on mugs, canvases, shirts & more!</p>
            </div>
          </div>
          <button class="ai-btn ai-btn-primary ai-btn-large" onclick="showStep('upload')">Start Creating Now! 🚀</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Step 2: Upload Photo -->
  <div class="ai-step" id="step-upload" style="display: none;">
    <div class="ai-container">
      <div class="ai-progress-header">
        <span class="progress-step active">1. Upload Photo</span>
        <span class="progress-step">2. Choose Pose</span>
        <span class="progress-step">3. AI Generation</span>
        <span class="progress-step">4. Choose Products</span>
      </div>
      <h2>📸 Upload Your Pet's Photo</h2>
      <p class="subtitle">Upload 1 clear photo of your pet's face</p>

      <div class="ai-upload-zone" id="uploadZone">
        <div id="uploadPlaceholder">
          <span style="font-size: 64px;">📷</span>
          <h3>Click to Upload Photo</h3>
          <p>JPG, PNG • Max 10MB</p>
          <input type="file" id="petPhoto" accept="image/*" style="display: none;">
        </div>
        <div id="uploadPreview" style="display: none;"></div>
      </div>

      <div class="ai-button-group">
        <button class="ai-btn ai-btn-secondary" onclick="showStep('welcome')">← Back</button>
        <button class="ai-btn ai-btn-primary" id="btnNextToPoses" style="display: none;" onclick="showStep('poses')">Next: Choose Iconic Pose →</button>
      </div>
    </div>
  </div>

  <!-- Step 3: Choose Iconic Pose (NEW!) -->
  <div class="ai-step" id="step-poses" style="display: none;">
    <div class="ai-container-wide">
      <div class="ai-progress-header">
        <span class="progress-step complete">✓ Upload Photo</span>
        <span class="progress-step active">2. Choose Pose</span>
        <span class="progress-step">3. AI Generation</span>
        <span class="progress-step">4. Choose Products</span>
      </div>
      <h2>🎭 Choose Your Iconic Pose</h2>
      <p class="subtitle">Click on the pose you want your pet in</p>

      <!-- Filter buttons -->
      <div class="pose-filters">
        <button class="filter-btn active" onclick="filterPoses('all')">All Poses</button>
        <button class="filter-btn" onclick="filterPoses('Sports')">🏀 Sports</button>
        <button class="filter-btn" onclick="filterPoses('Superhero')">🦸 Superhero</button>
        <button class="filter-btn" onclick="filterPoses('Adventure')">🚀 Adventure</button>
        <button class="filter-btn" onclick="filterPoses('Royalty')">👑 Royalty</button>
        <button class="filter-btn" onclick="filterPoses('Formal')">🎩 Formal</button>
      </div>

      <div id="posesLoadingMessage" class="loading-message">
        <div class="spinner-small"></div>
        <p>Loading iconic poses...</p>
      </div>

      <div class="poses-gallery" id="posesGallery">
        <!-- Poses will be loaded here by JavaScript -->
      </div>

      <div class="ai-button-group">
        <button class="ai-btn ai-btn-secondary" onclick="showStep('upload')">← Back</button>
      </div>
    </div>
  </div>

  <!-- Step 4: Generating/Loading -->
  <div class="ai-step" id="step-loading" style="display: none;">
    <div class="ai-container">
      <div class="ai-progress-header">
        <span class="progress-step complete">✓ Upload Photo</span>
        <span class="progress-step complete">✓ Choose Pose</span>
        <span class="progress-step active">3. AI Generation</span>
        <span class="progress-step">4. Choose Products</span>
      </div>
      <h2>🎨 Swapping Your Pet's Face...</h2>
      <p class="subtitle">This takes 30-45 seconds. Hang tight!</p>

      <div class="ai-loading-animation">
        <div class="spinner"></div>
      </div>
      <p id="loadingStatus" class="loading-status">Analyzing your pet's face...</p>
      <div class="ai-progress-container">
        <div id="progressBar" class="ai-progress-bar">0%</div>
      </div>
      <div class="ai-timer">
        <p><strong>Time remaining: <span id="timeRemaining">45</span> seconds</strong></p>
        <p class="ai-tip">💡 Our AI places your pet's face perfectly!</p>
      </div>
    </div>
  </div>

  <!-- Step 5: Result & Products -->
  <div class="ai-step" id="step-products" style="display: none;">
    <div class="ai-container-wide">
      <div class="ai-progress-header">
        <span class="progress-step complete">✓ Upload Photo</span>
        <span class="progress-step complete">✓ Choose Pose</span>
        <span class="progress-step complete">✓ AI Generated</span>
        <span class="progress-step active">4. Choose Your Product</span>
      </div>
      <h2>🎉 Your Custom Pet Portrait!</h2>
      <p class="subtitle">Click below to see this amazing image on products</p>

      <div class="selected-image-preview" id="selectedImagePreview">
        <img id="selectedImage" src="" alt="Your custom pet portrait" class="preview-image-large">
      </div>

      <div class="products-grid" id="productsGrid">
        {% assign products = collections.all.products %}
        {% for product in products limit: 20 %}
        <div class="product-card" data-product-id="{{ product.id }}" data-variant-id="{{ product.variants.first.id }}">
          <div class="product-image-container">
            <img src="{{ product.featured_image | img_url: 'large' }}" alt="{{ product.title }}" class="product-base-image">
          </div>
          <h3 class="product-title">{{ product.title }}</h3>
          <p class="product-price">{{ product.price | money }}</p>
          <button class="ai-btn ai-btn-primary" onclick="addToCart({{ product.variants.first.id }})">Add to Cart 🛍️</button>
        </div>
        {% endfor %}
      </div>

      <div class="ai-button-group">
        <button class="ai-btn ai-btn-secondary" onclick="showStep('poses')">← Try Different Pose</button>
      </div>
    </div>
  </div>
</div>

<style>
.ai-creator-app { width: 100%; min-height: 100vh; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px 0; }
.ai-step { display: none; padding: 20px; }
.ai-container { max-width: 800px; margin: 0 auto; background: white; border-radius: 20px; padding: 40px; box-shadow: 0 10px 40px rgba(0,0,0,0.2); }
.ai-container-wide { max-width: 1400px; margin: 0 auto; background: white; border-radius: 20px; padding: 40px; }
.ai-hero { text-align: center; }
.ai-title { font-size: 42px; font-weight: bold; color: #333; margin: 0 0 10px 0; }
.ai-subtitle { font-size: 24px; color: #666; margin: 0 0 30px 0; }
.ai-step-preview { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 40px 0; }
.step-card { background: #f8f9fa; border-radius: 15px; padding: 25px 15px; text-align: center; transition: all 0.3s; }
.step-card:hover { transform: translateY(-5px); box-shadow: 0 5px 20px rgba(0,0,0,0.1); }
.step-icon { font-size: 42px; display: block; margin-bottom: 15px; }
.step-card h3 { font-size: 16px; margin: 10px 0; color: #333; font-weight: 600; }
.step-card p { font-size: 13px; color: #666; margin: 0; line-height: 1.4; }
.ai-btn { padding: 15px 35px; border: none; border-radius: 10px; font-size: 16px; font-weight: bold; cursor: pointer; transition: all 0.3s; }
.ai-btn-primary { background: #667eea; color: white; }
.ai-btn-primary:hover:not(:disabled) { background: #5568d3; transform: scale(1.05); }
.ai-btn-primary:disabled { background: #ccc; cursor: not-allowed; opacity: 0.6; }
.ai-btn-secondary { background: #e0e0e0; color: #333; }
.ai-btn-large { font-size: 18px; padding: 18px 40px; margin-top: 30px; }
.ai-progress-header { display: flex; justify-content: space-between; margin-bottom: 30px; flex-wrap: wrap; gap: 10px; }
.progress-step { padding: 8px 15px; border-radius: 20px; background: #f0f0f0; color: #999; font-weight: bold; font-size: 13px; }
.progress-step.active { background: #667eea; color: white; }
.progress-step.complete { background: #4caf50; color: white; }
.ai-upload-zone { border: 3px dashed #ccc; border-radius: 15px; padding: 60px; text-align: center; cursor: pointer; transition: all 0.3s; min-height: 250px; display: flex; align-items: center; justify-content: center; background: #fafafa; }
.ai-upload-zone:hover { border-color: #667eea; background: #f0f5ff; }
.ai-button-group { display: flex; justify-content: space-between; margin-top: 30px; gap: 15px; flex-wrap: wrap; }
.spinner { width: 60px; height: 60px; border: 6px solid #f3f3f3; border-top: 6px solid #667eea; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 30px; }
.spinner-small { width: 30px; height: 30px; border: 4px solid #f3f3f3; border-top: 4px solid #667eea; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 15px; }
@keyframes spin { to { transform: rotate(360deg); } }
.ai-progress-container { width: 100%; max-width: 500px; background: #f0f0f0; border-radius: 20px; overflow: hidden; margin: 30px auto; }
.ai-progress-bar { height: 40px; background: linear-gradient(90deg, #667eea, #764ba2); color: white; display: flex; align-items: center; justify-content: center; font-weight: bold; width: 0%; transition: width 0.3s; }
.loading-status { text-align: center; font-size: 16px; color: #666; margin: 20px 0; }
.ai-timer { text-align: center; margin-top: 30px; }
.ai-tip { color: #667eea; font-size: 14px; margin-top: 15px; }
.subtitle { text-align: center; font-size: 18px; color: #666; margin-bottom: 30px; }
h2 { text-align: center; color: #333; font-size: 32px; margin: 0 0 10px 0; }

/* Pose Gallery Styles */
.pose-filters { display: flex; flex-wrap: wrap; justify-content: center; gap: 10px; margin-bottom: 30px; }
.filter-btn { padding: 10px 20px; border: 2px solid #667eea; background: white; color: #667eea; border-radius: 25px; cursor: pointer; font-size: 14px; font-weight: 600; transition: all 0.3s; }
.filter-btn:hover { background: #f0f5ff; }
.filter-btn.active { background: #667eea; color: white; }
.loading-message { text-align: center; padding: 40px; color: #666; }
.poses-gallery { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 20px; margin-bottom: 30px; }
.pose-card { background: white; border: 3px solid #e0e0e0; border-radius: 15px; overflow: hidden; cursor: pointer; transition: all 0.3s; position: relative; }
.pose-card:hover { transform: translateY(-5px); box-shadow: 0 10px 30px rgba(0,0,0,0.15); border-color: #667eea; }
.pose-card.selected { border-color: #4caf50; box-shadow: 0 0 0 4px rgba(76, 175, 80, 0.3); }
.pose-thumbnail { width: 100%; height: 250px; object-fit: cover; background: #f5f5f5; }
.pose-info { padding: 15px; text-align: center; }
.pose-name { font-size: 16px; font-weight: bold; color: #333; margin: 0 0 5px 0; }
.pose-category { font-size: 13px; color: #667eea; font-weight: 600; display: inline-block; padding: 4px 12px; background: #f0f5ff; border-radius: 12px; }
.pose-select-badge { position: absolute; top: 10px; right: 10px; background: #4caf50; color: white; padding: 8px 15px; border-radius: 20px; font-size: 12px; font-weight: bold; display: none; }
.pose-card.selected .pose-select-badge { display: block; }
.selected-image-preview { text-align: center; margin-bottom: 40px; }
.preview-image-large { max-width: 600px; width: 100%; border-radius: 15px; box-shadow: 0 10px 40px rgba(0,0,0,0.2); }
.products-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 25px; margin-top: 30px; }
.product-card { background: #f8f9fa; border-radius: 15px; padding: 20px; text-align: center; transition: all 0.3s; }
.product-card:hover { transform: translateY(-5px); box-shadow: 0 5px 20px rgba(0,0,0,0.1); }
.product-image-container { width: 100%; height: 250px; margin-bottom: 15px; border-radius: 10px; overflow: hidden; background: white; }
.product-base-image { width: 100%; height: 100%; object-fit: cover; }
.product-title { font-size: 16px; font-weight: 600; color: #333; margin: 10px 0; }
.product-price { font-size: 18px; font-weight: bold; color: #667eea; margin: 10px 0; }
</style>

<script>
let uploadedImage = null;
let selectedPoseId = null;
let allPoses = [];
let generatedImageUrl = null;

// API Endpoint
const API_ENDPOINT = 'https://all-dogs-rock-api-v2.vercel.app/api/app-proxy/generate';
const POSES_ENDPOINT = 'https://all-dogs-rock-api-v2.vercel.app/api/poses/list';

console.log('🚀 AI Pet Creator Initialized (Pose Gallery Version)');
console.log('API Endpoint:', API_ENDPOINT);
console.log('Poses Endpoint:', POSES_ENDPOINT);

// Step navigation
function showStep(stepName) {
  document.querySelectorAll('.ai-step').forEach(step => step.style.display = 'none');
  document.getElementById('step-' + stepName).style.display = 'block';

  // Load poses when showing poses step
  if (stepName === 'poses' && allPoses.length === 0) {
    loadIconicPoses();
  }
}

// Photo upload handling
document.getElementById('uploadZone').addEventListener('click', () => {
  document.getElementById('petPhoto').click();
});

document.getElementById('petPhoto').addEventListener('change', (e) => {
  const file = e.target.files[0];
  if (!file) return;

  console.log('📸 Photo selected:', file.name, file.type, file.size);

  const reader = new FileReader();
  reader.onload = (e) => {
    const img = new Image();
    img.onload = () => {
      // Resize image to max 1024x1024 to prevent GPU memory issues
      const MAX_SIZE = 1024;
      let width = img.width;
      let height = img.height;

      if (width > height && width > MAX_SIZE) {
        height = (height * MAX_SIZE) / width;
        width = MAX_SIZE;
      } else if (height > MAX_SIZE) {
        width = (width * MAX_SIZE) / height;
        height = MAX_SIZE;
      }

      const canvas = document.createElement('canvas');
      canvas.width = width;
      canvas.height = height;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(img, 0, 0, width, height);

      // Convert to base64 with 80% quality to reduce size
      uploadedImage = canvas.toDataURL('image/jpeg', 0.8);

      console.log('✅ Image resized to:', width, 'x', height);
      console.log('✅ Image data size:', uploadedImage.length, 'characters');

      // Show preview
      document.getElementById('uploadPlaceholder').style.display = 'none';
      document.getElementById('uploadPreview').style.display = 'block';
      document.getElementById('uploadPreview').innerHTML = `
        <img src="${uploadedImage}" style="max-width: 100%; max-height: 400px; border-radius: 10px;">
        <p style="margin-top: 15px; color: #4caf50; font-weight: bold;">✓ Photo uploaded successfully!</p>
      `;
      document.getElementById('btnNextToPoses').style.display = 'block';
    };
    img.src = e.target.result;
  };
  reader.readAsDataURL(file);
});

// Load iconic poses from API
async function loadIconicPoses() {
  console.log('🎭 Loading iconic poses...');
  document.getElementById('posesLoadingMessage').style.display = 'block';

  try {
    const response = await fetch(POSES_ENDPOINT);
    const data = await response.json();

    if (data.success && data.poses) {
      allPoses = data.poses;
      console.log('✅ Loaded', allPoses.length, 'iconic poses');
      displayPoses(allPoses);
    } else {
      throw new Error('Failed to load poses');
    }
  } catch (error) {
    console.error('❌ Error loading poses:', error);
    document.getElementById('posesLoadingMessage').innerHTML = `
      <p style="color: red;">Failed to load poses. Please refresh the page.</p>
    `;
  }
}

// Display poses in gallery
function displayPoses(poses) {
  document.getElementById('posesLoadingMessage').style.display = 'none';
  const gallery = document.getElementById('posesGallery');

  gallery.innerHTML = poses.map(pose => `
    <div class="pose-card" data-pose-id="${pose.id}" data-category="${pose.category}" onclick="selectPose('${pose.id}')">
      <div class="pose-select-badge">✓ SELECTED</div>
      <img src="${pose.thumbnailUrl}" alt="${pose.name}" class="pose-thumbnail"
           onerror="this.src='https://via.placeholder.com/280x250?text=${encodeURIComponent(pose.name)}'">
      <div class="pose-info">
        <p class="pose-name">${pose.name}</p>
        <span class="pose-category">${pose.category}</span>
      </div>
    </div>
  `).join('');
}

// Filter poses by category
function filterPoses(category) {
  // Update filter buttons
  document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
  event.target.classList.add('active');

  // Filter poses
  const filtered = category === 'all'
    ? allPoses
    : allPoses.filter(pose => pose.category === category);

  displayPoses(filtered);
}

// Select a pose
function selectPose(poseId) {
  selectedPoseId = poseId;
  console.log('🎭 Selected pose:', poseId);

  // Update UI
  document.querySelectorAll('.pose-card').forEach(card => card.classList.remove('selected'));
  document.querySelector(`[data-pose-id="${poseId}"]`).classList.add('selected');

  // Auto-advance after selection
  setTimeout(() => {
    generateFaceSwap();
  }, 500);
}

// Generate face swap
async function generateFaceSwap() {
  if (!uploadedImage || !selectedPoseId) {
    alert('Please upload a photo and select a pose first!');
    return;
  }

  showStep('loading');

  console.log('🎨 Starting face swap...');
  console.log('Pose ID:', selectedPoseId);

  // Start progress animation
  let progress = 0;
  let timeLeft = 45;
  const progressInterval = setInterval(() => {
    progress += 2;
    if (progress > 90) progress = 90;
    document.getElementById('progressBar').style.width = progress + '%';
    document.getElementById('progressBar').textContent = progress + '%';
  }, 1000);

  const timerInterval = setInterval(() => {
    timeLeft--;
    document.getElementById('timeRemaining').textContent = timeLeft;
    if (timeLeft <= 0) clearInterval(timerInterval);
  }, 1000);

  try {
    const requestBody = {
      poseId: selectedPoseId,
      image: uploadedImage,
      premium: false
    };

    console.log('📤 Sending face swap request...');

    const response = await fetch(API_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    console.log('📥 Response status:', response.status);

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.details || errorData.error || 'Face swap failed');
    }

    const data = await response.json();
    console.log('✅ Face swap completed!', data);

    clearInterval(progressInterval);
    clearInterval(timerInterval);

    document.getElementById('progressBar').style.width = '100%';
    document.getElementById('progressBar').textContent = '100%';

    if (data.success && data.imageUrl) {
      generatedImageUrl = data.imageUrl;
      console.log('🖼️ Generated image URL:', generatedImageUrl);

      // Show result
      document.getElementById('selectedImage').src = generatedImageUrl;
      document.getElementById('selectedImagePreview').style.display = 'block';
      showStep('products');
    } else {
      throw new Error('No image URL in response');
    }
  } catch (error) {
    console.error('❌ Face swap error:', error);
    clearInterval(progressInterval);
    clearInterval(timerInterval);
    alert('Error generating image: ' + error.message);
    showStep('poses');
  }
}

// Add to cart function
function addToCart(variantId) {
  console.log('🛍️ Adding to cart, variant:', variantId);
  alert('Adding to cart! This will integrate with your Shopify cart.');
  // Shopify cart integration code here
}
</script>
